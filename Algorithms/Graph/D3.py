class Graph:
    def __init__(self):
        self.n = int(input())  # 노드 개수
        self.v = int(input())  # 엣지 개수
        self.edge = [[] for _ in range(self.n)]  # 노드의 갯수만큼 빈 리스트 만들기
        for _ in range(self.v):
            edge = list(map(int, input().split(' ')))  # 세 개의 값을 리스트로 저장
            self.edge[edge[0]].append((edge[1], edge[2]))  # 연결리스트 형태로 저장
            # print(f"node connected with {edge[0]}: {self.edge[edge[0]]} ")
        self.dist = [[0, 0]] + [[1<<61, i] for i in range(1, self.n)]  # dist를 저장할 리스트 [0]에 dist, [1]에 해당 노드 index 반환
        self.node = [False] * self.n  # self.node >> 순회 여부 체크
        self.parent = [0] + [None for i in range(self.n)]  # self.parent >> parent를 저장할 리스트
        self.H = self.make_heap(self.dist)  # Heap 만들기
        self.dist = [self.dist[i][0] for i in range(len(self.dist))]
        self.dijkstra()

    def heapify_down(self, H, k, n):
        while 2 * k + 1 < n:
            L, R = 2 * k + 1, 2 * k + 2
            if L < n and H[L][0] < H[k][0]:
                m = L
            else:
                m = k
            if R < n and H[R][0] < H[m][0]:
                m = R
            if m != k:
                H[k], H[m] = H[m], H[k]
                k = m
            else:
                break

    def make_heap(self, H):
        n = len(H)
        for k in range(n - 1, -1, -1):
            H[0], H[k] = H[k], H[0]
            self.heapify_down(H, k, n)
        return H

    def deleteMin(self, H):
        if self.dist:
            return

    def dijkstra(self):
        while self.H:
            u = self.H.pop(0)
            print(u)
            if self.node[u[1]] == True:
                pass
            else:
                self.node[u[1]] = True
                for i in self.edge[u[1]]:
                    # i[0]: 도착 노드, i[1]: 가중치
                    if self.dist[i[0]] > i[1] + self.dist[u[1]]:
                        self.dist[i[0]] = i[1] + self.dist[u[1]] #dist값 변경
                        self.parent[i[0]] = u[1]
                        self.H = self.decreasekey(self.H, i[0], self.dist[i[0]])
                        print(self.dist)
                self.H = self.make_heap(self.H)

        for i in range(len(self.dist)):
            if self.dist[i] == 1<<61:
                print("inf", end = " ")
            else:
                print(self.dist[i], end = " ")

    def decreasekey(self, heap, idx, dist):
        for i in heap:
            if i[1] == idx:
                i[0] = dist
                break
        return heap



Graph()
'''
[0, 0]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 3, 2305843009213693952, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 3, 2305843009213693952, 5, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952]
[3, 8]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952]
[0, 2305843009213693952, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952]
[5, 9]
[0, 9, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952]
[5, 11]
[0, 9, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952]
[0, 9, 2305843009213693952, 2305843009213693952, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 8]
[0, 9, 2305843009213693952, 9, 2305843009213693952, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 8]
[5, 10]
[0, 9, 2305843009213693952, 9, 10, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 2305843009213693952, 7, 2305843009213693952, 7, 2305843009213693952, 8]
[0, 9, 2305843009213693952, 9, 10, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 8, 7, 2305843009213693952, 7, 2305843009213693952, 8]
[0, 9, 6, 9, 10, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 8, 7, 2305843009213693952, 7, 2305843009213693952, 8]
[0, 9, 6, 9, 10, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 8, 7, 2305843009213693952, 7, 7, 8]
[0, 9, 6, 9, 10, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 8, 7, 2305843009213693952, 7, 7, 6]
[6, 2]
[0, 9, 6, 9, 10, 7, 2305843009213693952, 2305843009213693952, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[0, 9, 6, 9, 10, 7, 2305843009213693952, 8, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[6, 19]
[7, 5]
[7, 15]
[0, 9, 6, 9, 10, 7, 11, 8, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[0, 9, 6, 8, 10, 7, 11, 8, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[0, 9, 6, 8, 9, 7, 11, 8, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[7, 17]
[7, 13]
[7, 18]
[7, 12]
[0, 8, 6, 8, 9, 7, 11, 8, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[8, 7]
[8, 14]
[0, 8, 6, 8, 9, 7, 9, 8, 3, 5, 5, 5, 7, 7, 8, 7, 8, 7, 7, 6]
[8, 1]
[8, 3]
[8, 16]
[9, 6]
[9, 4]
0 8 6 8 9 7 9 8 3 5 5 5 7 7 8 7 8 7 7 6 
Process finished with exit code 0

'''